- must handle persistent, detached, read-only and in-memory cases
- The act of serializing a persistent object is equivalent to detach, then serialize
	- the effect of this is make the objects coming back to be in a detached state
- detached objects should come back as detached
- in-memory objects should come back as in-memory
- read-only objects are either persisted, or in-memory
	- deserialization of persisted read-only objects retrieves the unique instance.
		- try to IO optimize this on a list deserialization
- two choices for navigation following:
	- navigation based, rooted at one point. just like reladomo deep fetches
		- a little harder to reuse/abstract out, but quite possible if the code is just like deep fetch.
	- class based. with max depth.
		- for each config, each class specifies what to navigate.
		- while this is interesting, it's not consistent with the existing deepFetch semantics
			- supporting this could mean supporting a different kind of deepFetch
				- only seems interesting for navigations that have loops

- annotations:
	- used for methods declared on the concrete classes
	- only support parameterless methods
	- @ReladomoSerializable
	- @ReladomoSerializable("contextName")
	- can be excluded (like attributes) from a particular path in a config

- generic serializer:
	- usually a framework, like gson, will call something like:
			serialize(reladomoObject, serializationContext)
		on a registered implementation of the serializer
	- to delegate, let's wrap serializationContext into a ReladomoSerializationContext
	- must register serializers for both reladomo objects and lists
	- exception handling?
	
	ReladomoSerializationContext:
		- serialize(reladomoObject)
		- serialize(reladomoObject, List<Navigation)
		- is given a list of navigations to follow
			- this will come from the deep fetches on a list automatically
		- can exclude attributes
		- can use a named configuration
		- outputs links for the rest of the navigations
		- abstract methods:
			- always passes in the original object
			- writeStart(reladomoObject)
			- writeInt(reladomoObject, name, value), writeLong, ...
			- writeNull(reladomoObject, name)
			- writeList
			- writeLink(reladomoObject, linkName, linkAttributes, linkParams)
			- writeObject(reladomoObject, attrName, objectToWrite)
			- writeEnd(reladomoObject)
			- names starting with _rdo are reladomo internal
				- _rdoState: 1 (in-memory), 4 (detached), 100 (read-only)
				- _rdoClass: java class name
		
gson example:
	serialize(reladomoObject, type, context)
	{
		j = new JsonObject()
		new GsonReladomoSerializationContext(j, context).serialize(reladomoObject);
		return j;
	}

jackson example: org.codehaus.jackson.map.JsonSerializer
	serialize(reladomoObject, JsonGenerator jgen, SerializerProvider provider) 
	{
		new JacksonReladomoSerializationContext(jgen, provider).serialize(reladomoObject);
	}

xml example:
